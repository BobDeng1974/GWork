/*!

\page build_gwork Building Gwork

\section using_cmake Using Cmake

Cmake is used to generate project files in your chosen format. It is best to build the project in
subdirectory of the main project, e.g. in a directory called "build". You might make multiple
version of the project for different options or targets this way.

\subsection win_build Windows

\code{.sh}
cmake --help    # show cmake options
\endcode

\note Currently Windows only supports cross platform targets, i.e. the ones listed below.

To generate project files:

\code{.sh}
mkdir build
cd build
cmake -G "Visual Studio 14 2015 Win64" -DRENDER_ALLEGRO5=ON ..
start gwork.sln
\endcode

\subsection osx_build OSX

\code{.sh}
cmake -h    # show cmake options
\endcode

To generate project files:

\code{.sh}
mkdir build && cd build
cmake -G Xcode -DRENDER_ALLEGRO5=ON ..
open gwork.xcodeproj
\endcode

\subsection linux_build Linux

\code{.sh}
cmake -h    # show cmake options
\endcode

To generate project files:

\code{.sh}
mkdir build && cd build
cmake -G "Unix Makefiles" -DRENDER_ALLEGRO5=ON ..
\endcode


\section gwork_targets Targets

Gwork currently supports the following rendering targets:

- Allegro 5
- OpenGL
- SDL2
- SFML2

You can choose these by defining a variable when you run cmake to generate the project files,
i.e. `-DRENDER_<TARGET>=ON`, e.g. :-

- `-DRENDER_ALLEGRO5=ON`
- `-DRENDER_OPENGL=ON`
- `-DRENDER_SDL2=ON`
- `-DRENDER_SFML2=ON`

\note You can only choose one target at a time. If you would like to compile multiple targets,
create multiple build folders and create different project files and targets in each.

Some tests and a sample are included for each target by default. These can be turned off using:

- `-DBUILD_TEST=OFF`
- `-DBUILD_SAMPLE=OFF`

You should compile and run the sample to make sure that everything is working correctly.


\section gwork_cmake_embed Using Gwork in your project

An example cmake project is supplied below.

\code{.cmake}
# CMake build instructions for app embedding Gwork 

# configure cmake
cmake_minimum_required(VERSION 3.1)
cmake_policy(SET CMP0004 OLD)

# we require C++11 - this set appropriate flags for compilers, which may not be portable
set(CMAKE_CXX_STANDARD 11)

project(AppUsingGwork)

# Gwork is sub-project of this one
set(GWORK_DIR ${CMAKE_CURRENT_SOURCE_DIR}/gwork)
add_subdirectory(${GWORK_DIR})

# GUI lib, change to suit. Borrow Gwork modules.
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${GWORK_DIR}/cmake/Modules/")
find_package(Allegro5 REQUIRED)

include_directories(${GWORK_DIR}/source/platform/include
                    ${GWORK_DIR}/source/gwork/include
                    ${GWORK_DIR}/source/test/include
                    ${ALLEGRO5_INCLUDE_DIRS})

add_executable(AppUsingGwork Allegro5Sample.cpp)

target_link_libraries(AppUsingGwork Gwork GworkAllegro5 GworkTest ${ALLEGRO5_LIBRARIES})

\endcode

This assumes that you have the directory structure:

- Project/
    - CMakeLists.txt  (above config)
    - Gwork/

\note When you run cmake you still need to use the above cmake command-line arguments to generate the project. Gwork needs to know which renderer etc you want to use.

*/
